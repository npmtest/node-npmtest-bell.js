{"/home/travis/build/npmtest/node-npmtest-bell.js/test.js":"/* istanbul instrument in package npmtest_bell_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bell.js/lib.npmtest_bell.js.js":"/* istanbul instrument in package npmtest_bell_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bell_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bell_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bell.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bell.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bell_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bell_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bell_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bell_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bell_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bell_js.__dirname + '/lib.npmtest_bell_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/statsd.js":"/**\n * Statsd backend to work as a Node-Bell client.\n *\n *   * Statsd: https://github.com/etsy/statsd\n *   * Node-bell: https://github.com/eleme/bell.js\n *\n * Optional configs:\n *\n *   bellHost, default: '0.0.0.0'\n *   bellPort, default: 2015\n *   bellIgnores, default: ['statsd.*']\n *   bellTimerDataFields, default: ['mean_90', 'count_ps']\n *\n * Metric types supported: `counter_rates` & `timer_data` & `gauge`\n */\n\n'use strict';\n\nvar net = require('net');\nvar minimatch = require('minimatch');\nvar protocol = require('./lib/protocol');\n\nvar config;\nvar debug;\nvar logger;\n\n// datapoints creator for each metric type\nvar makers = {\n  'counter_rates': function (key, val, time) {\n    return [['counter.' + key, [time, val]]];\n  },\n  'timer_data': function (key, stats, time) {\n    var fields = config.bellTimerDataFields || ['mean_90', 'count_ps'];\n    var datapoints = [];\n\n    for (var i = 0; i < fields.length; i++) {\n      var field = fields[i];\n      var name = ['timer', field, key].join('.');\n      var val = stats[field];\n      datapoints.push([name, [time, val]]);\n    }\n    return datapoints;\n  },\n  'gauges': function(key, val, time) {\n    return [['gauge.' + key, [time, val]]];\n  },\n};\n\n/**\n * test if metric name matches our ignore patterns\n *\n * @param {String} key\n * @return {Boolean} // true for pass\n */\nfunction match(key) {\n  var ignores = config.bellIgnores || ['statsd.*'];\n\n  for (var i = 0; i < ignores.length; i++) {\n    if (minimatch(key, ignores[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction Bell() {}\n\nBell.prototype.connect = function() {\n  var self = this;\n\n  this.conn = net.connect({\n    host: config.bellHost || '0.0.0.0',\n    port: config.bellPort || 2015\n  }, function(){\n    if (debug) {\n      logger.log('bell connected successfully');\n    }\n  })\n  .on('error', function(err) {\n    if (debug) {\n      logger.log('bell connection error: ' + err.message);\n      logger.log('closing socket connection');\n    }\n    self.conn.destroy();\n    self.conn = undefined;\n  });\n\n  return this;\n};\n\nBell.prototype.flush = function(time, data) {\n  var list = [];\n  var types = Object.keys(makers);\n\n  // collect datapoints\n  for (var i = 0; i < types.length; i++) {\n    var type = types[i];\n    var dict = data[type];\n\n    for (var key in dict) {\n      if (!match(key)) {\n        var val = dict[key];\n        var maker = makers[type];\n        var datapoints = maker(key, val, time);\n        Array.prototype.push.apply(list, datapoints);\n      }\n    }\n  }\n\n  var length = list.length;\n\n  // send to bell if not empty\n  if (length > 0) {\n    var buffer = protocol.encode(list);\n\n    if (!this.conn) {\n      this.connect();\n    }\n\n    this.conn.write(buffer, 'utf8', function(){\n      if (debug) {\n        var message = 'sent to bell: ' + JSON.stringify(list[0]);\n\n        if (length > 1) {\n          message += ', (' + (length - 1) + ' more..)';\n        }\n\n        logger.log(message);\n      }\n    });\n  }\n};\n\nexports.init = function(uptime, _config, events, _logger) {\n  logger = _logger || console;\n  debug = _config.debug;\n  config = _config || {};\n  var bell = new Bell();\n  events.on('flush', function(time, data) {\n    bell.flush(time, data);\n  });\n  bell.connect();\n  return true;\n};\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/protocol.js":"/**\n * @overview  Bell Net Protocol.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n *\n * Net protocol between sockets:\n *\n *   Packet := Block+\n *   Block  := Size '\\n' Data\n *   Size   := literal_integer\n *   Data   := literal_stringify_json\n *\n * Exports:\n *\n *   * encode   encode datapoints to buffer\n *   * decode   decode buffer to chunks of datapoints\n *\n * Actualy, this protocol can be used in any json data.\n */\n\n'use strict';\n\n/**\n * Encode datapoints to buffer\n *\n * example\n *\n *   encode([['foo', [1412073046, 3.0]]])\n *   // => Buffer('24\\n[[\"foo\",[1412073046,3]]]')\n *\n * @param {Array} datapoints\n * @return {Buffer}\n */\nfunction encode(datapoints) {\n  var str = JSON.stringify(datapoints);\n  var len = Buffer.byteLength(str);\n  var buf = new Buffer([len, str].join('\\n'));\n  return buf;\n}\n\nexports.encode = encode;\n\n/**\n * Decode buffer to chunks of datapoints\n *\n * example\n *\n *   decode(new Buffer('24\\n[[\"foo\",[1412073046,3]]]'))\n *   // => [[[\"foo\",[1412073046,3]]],{\"type\":\"Buffer\",\"data\":[]}]\n *\n * @param {Buffer} buf\n * @return {Array}  // [datapoints, unfinished]\n */\nfunction decode(buf) {  // jshint ignore: line\n  var chunks = [],\n      chunk,\n      len = buf.length,\n      p = 0, // to loop over buffer\n      q = 0, // the index of first '\\n'\n      n = 0, // the index of next chunk\n      i = 0,\n      size,\n      t,\n      data,\n      unfinished,\n      datapoints;\n\n  while (p < len) {\n    q = [].indexOf.apply(buf, [10, p]);\n\n    if (q < 0) {\n      // no '\\n' was found\n      break;\n    }\n\n    // data size infomation\n    size = +buf.slice(p, q);\n\n    // skip '\\n'\n    t = p = q + 1;  // jshint ignore: line\n\n    // p: move to end of data\n    p += size;\n\n    if (p > len) {\n      // exceeds length\n      break;\n    }\n\n    data = buf.slice(t, p);\n    chunks.push(data.toString());\n\n    // record the index of next unit\n    n = p;\n  }\n\n  unfinished = buf.slice(n);\n\n  datapoints = [];\n\n  for (i = 0; i < chunks.length; i++) {\n    chunk = JSON.parse(chunks[i]);\n    [].push.apply(datapoints, chunk);\n  }\n  return [datapoints, unfinished];\n}\n\nexports.decode = decode;\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/bell.js":"/**\n * @overview  Real-time anomalies detection for periodic time series.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst co = require('co');\nconst program = require('commander');\nconst config = require('./lib/config');\nconst errors = require('./lib/errors');\nconst log = require('./lib/log');\nconst version = require('./package').version;\n\nglobal.Promise = require('bluebird').Promise;\n\nco(function *() {\n  var configsPath,\n      configsContent,\n      serviceName,\n      service;\n\n  //----------------------------------------------------\n  // Parse command line arguments\n  //----------------------------------------------------\n  program\n  .version(version)\n  .usage('<service> [options]')\n  .option('-c, --config-path <c>', 'config file path [optional]')\n  .option('-l, --log-level <l>', 'log level (e.g. debug, info..)',\n          function(l) { return log[l.toUpperCase()]; }, log.INFO)\n  .parse(process.argv);\n\n  serviceName = program.args[0];\n\n  if (!serviceName) {\n    program.help();\n  }\n\n  //----------------------------------------------------\n  // Initialize logging\n  //----------------------------------------------------\n  log.level = program.logLevel;\n\n  //----------------------------------------------------\n  // Read configs\n  //----------------------------------------------------\n  config.init(program.configPath);\n\n  //----------------------------------------------------\n  // Start service\n  //----------------------------------------------------\n  service = {\n    listener: require('./lib/listener'),\n    analyzer: require('./lib/analyzer'),\n    webapp:   require('./lib/webapp'),\n    alerter:  require('./lib/alerter'),\n    cleaner:  require('./lib/cleaner')\n  }[serviceName];\n\n  if (!service) {\n    program.help();\n  }\n\n  yield service.serve();\n}).catch(function(err) {\n  errors.dispatch(err);\n});\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/config.js":"/**\n * @overview  Runtime configurations with default values.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst assert = require('assert');\nconst events = require('events');\nconst fs = require('fs');\nconst log = require('./log');\nconst util = require('./util');\n\nconst config  = module.exports = {\n  interval: 10,\n  autoReload: true,\n\n  beanstalkd: {\n    host: '0.0.0.0',\n    port: 11300,\n    tube: 'bell'\n  },\n\n  ssdb: {\n    host: '0.0.0.0',\n    port: 8888,\n    auth: null,\n    size: 6,\n    prefix: 'bell.'\n  },\n\n  sqlite: {\n    file: 'bell.db',\n  },\n\n  listener: {\n    port: 2015,\n    whitelist: ['*'],\n    blacklist: ['statsd.*'],\n  },\n\n  analyzer: {\n    workers: 4,\n    strict: true,\n    startSize: 50,\n    periodicity: 24*3600,\n    expiration: 5*24*3600,\n    filterOffset: 0.01,\n    trendingFactor: 0.1,\n    fillBlankCounters: false,\n    fillBlankTimers: false,\n  },\n\n  webapp: {\n    port: 2016,\n    workers: 2,\n    root: null,\n    auth: {name: 'admin', pass: 'admin'},\n  },\n\n  cleaner: {\n    interval: 10*60,\n    threshold: 2*24*3600,\n  },\n\n  alerter: {\n    host: '0.0.0.0',\n    port: 2017,\n    sender: null,\n    interval: 20*60,\n  }\n};\n\n/**\n * Init config with config file path.\n *\n * @param {String} file\n */\nconfig.init = function(file) {\n  if (file) {\n    if (!config._file)\n      config._file = file;\n\n    config.reload();\n\n    util.fileOnChanges(config._file, function() {\n      if (config.autoReload)\n        config.reload();\n    });\n  } else {\n    log.warn(\"using default config..\");\n  }\n};\n\n/**\n * Reload config file.\n */\nconfig.reload = function() {\n  assert(config._file);\n  log.info(\"reading config from %s..\", config._file);\n  var conf = util.loadObjectFromPath(config._file);\n  util.updateNestedObjects(config, conf);\n  config.emitter.emit('reload');\n};\n\nconfig.emitter = new events.EventEmitter();\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/log.js":"/**\n * @overview  Simple logging.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst util = require('./util');\n\nconst levels = {\n  DEBUG: 10,\n  INFO : 20,\n  WARN : 30,\n  ERROR: 40,\n  CRIT : 50,\n};\n\nfunction log(levelName, args) {\n  if (levels[levelName.toUpperCase()] >= exports.level) {\n    var msg = util.format.apply(null, args);\n    return util.log(\"%s %s :: %s\", process.pid, levelName, msg);\n  }\n}\n\nexports = module.exports = {\n  level: levels.INFO,\n  debug: function() { log('debug', arguments); },\n  info : function() { log('info', arguments); },\n  warn : function() { log('warn', arguments); },\n  error: function() { log('error', arguments); },\n  crit : function() { log('crit', arguments); },\n};\nutil._extend(exports, levels);\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/util.js":"/**\n * @overview  Util functions\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst url = require('url');\nconst util = require('util');\n\n//------------------------------------------\n// Exports\n//------------------------------------------\nexports.objectLength = objectLength;\nexports.updateNestedObjects = updateNestedObjects;\nexports.loadObjectFromPath = loadObjectFromPath;\nexports.cleanWith = cleanWith;\nexports.diffArray = diffArray;\nexports.uniqueArray = uniqueArray;\nexports.join = join;\nexports.urlEncode = urlEncode;\nexports.urlDecode = urlDecode;\nexports.urlParamsEncode = urlParamsEncode;\nexports.fastMatch = fastMatch;\nexports.startsWith = startsWith;\nexports.endsWith = endsWith;\nexports.fileOnChanges = fileOnChanges;\nexports.fileOnChangesWithMinInterval = fileOnChangesWithMinInterval;\nexports.fileOnChangesWithMinIntervalAndRunNow = fileOnChangesWithMinIntervalAndRunNow;\nexports.patchBeansClient = patchBeansClient;\nexports.ReadOnlyArray = ReadOnlyArray;\nexports.setIntervalAndRunNow = setIntervalAndRunNow;\nexports.timerStart = timerStart;\n\n// extend all utils from standlib util\nutil._extend(module.exports, util);\n\n//------------------------------------------\n// Objects\n//------------------------------------------\n\nfunction objectLength(obj) {\n  return Object.keys(obj).length;\n}\n\n/**\n * Update nested objects in place.\n *\n * example:\n *\n *   updateNestedObjects({x: 1, y: {z: 2}}, {x: 2, y: {z: 3, p: 4}, q: 5})\n *   // => {x: 2, y: {z: 3, p: 4}, q: 5}\n *\n *  @param {Object} obj\n *  @param {Object} other\n *  @return {Object} // obj\n */\nfunction updateNestedObjects(obj, other) {\n  var tmp, key, val;\n\n  for (key in other) {\n    if (other.hasOwnProperty(key)) {\n      val = other[key];\n      if (val !== null && typeof val === 'object' && !(val instanceof Array)) {\n        // val is an object\n        if (obj[key] === undefined) {\n          tmp = obj[key] = {};\n        } else {\n          tmp = obj[key];\n        }\n        updateNestedObjects(tmp, val);\n      } else {\n        obj[key] = val;\n      }\n    }\n  }\n  return obj;\n}\n\n/**\n * Load object from file path.\n *\n * @param {String} filePath\n * @return {Object}\n */\nfunction loadObjectFromPath(path) {\n  var content = fs.readFileSync(path);\n  return eval('var _; _ = ' + content);\n}\n\n/**\n * Pop key and val from an object only if the key and value are\n * all the same. (In place)\n *\n * @param {Object} obj\n * @param {Object} other\n * @return {Object} // obj\n */\nfunction cleanWith(obj, other) {\n  for (var key in obj) {\n    if (key in other && obj.hasOwnProperty(key) && obj[key] === other[key])\n      delete obj[key];\n  }\n  return obj;\n}\n\n/**\n * Diff arrays, return true on diff.\n * @param {Object} a\n * @param {Object} b\n * @param {Object} eq\n * @return {Boolean}\n */\nfunction diffArray(a, b, eq) {\n  if (a.length !== b.length)\n    return true;\n\n  var i, j, found;\n\n  eq = eq || function(x, y) {\n    return x === y;\n  };\n\n  for (i = 0; i < b.length; i++) {\n    found = false;\n    for (j = 0; j < b.length; j++) {\n      if (eq(a[i], b[j])) {\n        found = true;\n      }\n    }\n    if (!found)\n      return true;\n  }\n  return false;\n}\n\n/**\n * Make array unique.\n * @param {Array} arr\n * @param {Function} eq\n * @return {Array}\n */\nfunction uniqueArray(arr, eq) {\n  eq = eq || function(x, y) {\n    return x === y;\n  };\n\n  var ret = [], i, j, a, b, found;\n\n  for (i = 0; i < arr.length; i++) {\n    a = arr[i];\n    found = false;\n    for (j = 0; j < ret.length; j++) {\n      b = ret[j];\n      if (eq(a, b)) {\n        found = true;\n      }\n    }\n    if (!found)\n      ret.push(a);\n  }\n  return ret;\n}\n\n//------------------------------------------\n// Strings\n//------------------------------------------\n/**\n * Join pathes and normalize the result, e.g.\n *\n *    join('a', 'b', 'c')\n *    // => 'a/b/c'\n */\nfunction join() {\n  var result = path.join.apply(this, arguments);\n  return path.normalize(result);\n}\n\n/**\n * Encode url parameters\n * @param {Object} params\n * @return {String}\n */\nfunction urlParamsEncode(params) {\n  var pairs = [], key, val, item;\n  for (key in params) {\n    val = params[key];\n    item = [encodeURIComponent(key), encodeURIComponent(val)];\n    pairs.push(item.join('='));\n  }\n  return pairs.join('&');\n}\n\n/**\n * Encode url with parameters.\n * @param {String} path\n * @param {Object} params\n */\nfunction urlEncode(path, params) {\n  if (!params)\n    return path;\n  var s = path + '?' + urlParamsEncode(params);\n  return s.replace(/\\?$/g, '');\n}\n\n/**\n * Decode url to path and parameters.\n * @param {String} s\n * @return {Object}\n */\nfunction urlDecode(s) {\n  return url.parse(s, true);\n}\n\n/**\n * Minimatch is too slow.\n * @param {String} s\n * @param {String} p // pattern\n */\nfunction fastMatch(s, p) {\n  var arr = p.split('*');\n  var i, j;\n  for (i = 0, j = 0; i < arr.length; i++) {\n    j = s.indexOf(arr[i], j);\n    if (j < 0)\n      return false;\n    j += arr[i].length;\n  }\n  return true;\n}\n\nfunction startsWith(s, prefix) {\n  return s.indexOf(prefix) === 0;\n}\n\nfunction endsWith(s, suffix) {\n  return s.indexOf(suffix, s.length - suffix.length) !== -1;\n}\n\n\n//------------------------------------------\n// Files\n//------------------------------------------\n\n/**\n * Nodejs `fs.watch` currently not working well on osx,\n * here offers a compatiable way to do something if any\n * changes are made to the file.\n *\n * @param {String} file\n * @param {Function} callback // function()\n * @param {Number} intervalDarwin // in ms, default: 2000\n */\nfunction fileOnChanges(file, callback, intervalDarwin) {\n  if (process.platform == 'darwin') {\n    intervalDarwin = intervalDarwin || 2000;\n    return fs.watchFile(file, {interval: intervalDarwin}, function(curr, prev) {\n      if (curr.mtime != prev.mtime)\n        return callback();\n    });\n  } else {\n    return fs.watch(file, function(event, filename) {\n      if (event == 'change')\n        return callback();\n    });\n  }\n}\n\n/**\n * Watch file changes and do something if the `mtime`\n * is larger than `mtimeLast + interval`.\n *\n * @param {String} file\n * @param {Function} callback // function()\n * @param {Numberl} interval // in ms, default: 2000\n */\nfunction fileOnChangesWithMinInterval(file, callback, interval) {\n  interval = interval || 2000;\n\n  if (process.platform == 'darwin') {\n    return fs.watchFile(file, {interval: interval}, function(curr, prev) {\n      if (curr.mtime != prev.mtime)\n        return callback();\n    });\n  } else {\n    var mtime = new Date();\n    return fs.watch(file, function(event, filename) {\n      var mtimeNow = new Date();\n      if (event == 'change' && ((mtimeNow - mtime) >= interval)) {\n        mtime = mtimeNow;\n        return callback();\n      }\n    });\n  }\n}\n\n/*\n * @param {String} file\n * @param {Function} callback // function()\n * @param {Numberl} interval // in ms, default: 2000\n */\nfunction fileOnChangesWithMinIntervalAndRunNow(file, callback, interval) {\n  callback();\n  fileOnChangesWithMinInterval(file, callback, interval);\n}\n\n//------------------------------------------\n// Hacks\n//------------------------------------------\n\n/**\n * Thunkify fivebeans `reserve` method.\n *\n * @param {Object} c  // fivebeans client\n */\nfunction patchBeansClient(c) {\n  var reserve = function(cb) {\n    c.reserve(cb);\n  };\n\n  c._reserve = function() {\n    return function(cb) {\n      var _cb = function(e, jid, buf) {\n        cb(e, {\n          id: jid,\n          body: buf.toString()\n        });\n      };\n      reserve.apply(this, [_cb]);\n    };\n  };\n}\n\n//------------------------------------------\n// Math\n//------------------------------------------\n\n/**\n * ReadOnly array\n */\nfunction ReadOnlyArray(array) {\n  this.array = array;\n  this.cache = {};\n  this.length = array.length;\n  return this;\n}\n\nReadOnlyArray.prototype.mean = function() {\n  var i, sum, mean;\n\n  if (typeof this.cache.mean !== 'undefined')\n    return this.cache.mean;\n\n  for (i = 0, sum = 0; i < this.length; i++)\n    sum += this.array[i];\n\n  mean = sum / this.length;\n  this.cache.mean = mean;\n  return mean;\n};\n\nReadOnlyArray.prototype.std = function() {\n  var i, mean, sum, dis, std;\n\n  if (typeof this.cache.std !== 'undefined')\n    return this.cache.std;\n\n  mean = this.mean();\n\n  for (i = 0, sum = 0; i < this.length; i++) {\n    dis = this.array[i] - mean;\n    sum += dis * dis;\n  }\n\n  std = Math.sqrt(sum / this.length);\n  this.cache.std = std;\n  return std;\n};\n\n//------------------------------------------\n// Timers\n//------------------------------------------\n\nfunction setIntervalAndRunNow(fn, ms) {\n  fn();\n  return setInterval(fn, ms);\n}\n\nfunction timerStart() {\n  var startAt = new Date();\n  startAt.elapsed = function() {\n    return new Date() - startAt;\n  };\n  return startAt;\n}\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/errors.js":"/**\n * @overview  Bell errors dispatcher.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst ssdb = require('ssdb');\nconst Sequelize = require('sequelize');\nconst log = require('./log');\n\nvar fatals = [\n  ssdb.ConnectionError,\n  ssdb.TimeoutError,\n  Sequelize.ConnectionError,\n];\n\nvar skips = [\n  ssdb.SSDBError,\n  Sequelize.ValidationError,\n  Sequelize.TimeoutError,\n  Sequelize.DatabaseError,\n];\n\nexports.dispatch = function(err) {\n  if (!err)\n    return;\n  var i;\n\n  for (i = 0; i < fatals.length; i++) {\n    if (err instanceof fatals[i]) {\n      log.error(err.stack);\n      process.exit(1);\n      return;\n    }\n  }\n\n  for (i = 0; i < skips.length; i++) {\n    if (err instanceof skips[i]) {\n      log.error(err.stack);\n      return;\n    }\n  }\n\n  throw err;\n};\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/listener.js":"/**\n * @overview  Bell listener service.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst config = require('./config');\nconst crons = require('./crons');\nconst log = require('./log');\nconst models = require('./models');\nconst service = require('./service');\nconst util = require('./util');\n\n/**\n * Service listener.\n */\nfunction Listener() {\n  this._cache = {};\n}\nutil.inherits(Listener, service);\n\n/**\n * Get if a name matches our patterns, via cache\n *\n * @param {String} name\n * @return {Boolean}\n */\n\nListener.prototype.match = function(name) {\n  if (!(name in this._cache)) {\n    this._cache[name] = this._match(name);\n  }\n  return this._cache[name];\n};\n\n/**\n * Test if a datapoint matches our whitelist or blacklist.\n *\n * @param {String} name\n * @return {Boolean}  // true for pass\n */\nListener.prototype._match = function(name) {\n  var blacklist = config.listener.blacklist,\n      whitelist = config.listener.whitelist,\n      i;\n\n  for (i = 0; i < blacklist.length; i++) {\n    if (util.fastMatch(name, blacklist[i])) {\n      log.debug(\"%j hit black pattern %j\", name, blacklist[i]);\n      return false;\n    }\n  }\n\n  if (!whitelist.length) {\n    whitelist = this._rulesWhiteList;\n  }\n\n  for (i = 0; i < whitelist.length; i++) {\n    if (util.fastMatch(name, whitelist[i])) {\n      return true;\n    }\n  }\n  log.debug(\"%j dosent hit any white pattern\", name);\n  return false;\n};\n\n/**\n * Put a job to beanstalkd\n * @param {Array} data  // [name, [time, value]]\n */\nListener.prototype.putJob = function(datapoint) {\n  var job = JSON.stringify(datapoint);\n  // put(priority, delay, ttr, payload, callback)\n  return this.beans.put(0, 0, 60, job, function(err, jid) {\n    if (err) {\n      log.warnig('error on putting job: %s, error: %s', job, err);\n    } else {\n      log.info('queued: %s, job id: %d', job, jid);\n    }\n  });\n};\n\n/**\n * Parse datapoints comming from socket\n * @param {Array} datapoints  // [datapoint, ..]\n */\nListener.prototype.parse = function(datapoints) {\n  var i, datapoint;\n\n  for (i = 0; i < datapoints.length; i++) {\n    datapoint = datapoints[i];\n    if (this.match(datapoint[0]) && datapoint[1][1] !== null) {\n      this.putJob(datapoint);\n    }\n  }\n};\n\nListener.prototype.serve = function *() {\n  var self = this;\n  // init pattern matches cache {string: bool}\n  this._cache = {};\n  config.emitter.on('reload', function() {\n    self._cache = {};\n  });\n  this._rulesWhiteList = [];\n  // create server and connect job queue\n  this.createSocketServer(config.listener.port, function(datapoints) {\n    return self.parse(datapoints);\n  }).createBeansClient();\n  yield this.connectBeans('use');\n  // sync rules from sqlite\n  this._rules = [];\n  this.createSequelize();\n  models.register(this.sequelize);\n  crons.register(this);\n  yield this.sequelize.sync();\n  // clear cache on rule patterns changes\n  var diffRulePattern = function(a, b) {\n    return a.pattern === b.pattern;\n  };\n  // start sync rules\n  crons.syncRulesOnDBFileChanges(function() {\n    if (config.listener.whitelist.length)\n      return;\n    if (util.diffArray(crons.ctx.rules, self._rules, diffRulePattern)) {\n      self._cache = {};\n      self._rulesWhiteList = [];\n      for (var i = 0; i < crons.ctx.rules.length; i++) {\n        self._rulesWhiteList.push(crons.ctx.rules[i].pattern);\n      }\n      log.info(\"update whitelist cache on rules changes\");\n    }\n    self._rules = crons.ctx.rules;\n  });\n};\n\nmodule.exports = new Listener();\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/crons.js":"/**\n * @overview  Service cron job.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst co = require('co');\nconst config = require('./config');\nconst consts = require('./consts');\nconst log = require('./log');\nconst models = require('./models');\nconst util = require('./util');\n\nvar ssdb;\nvar sequelize;\nvar ctx = {};\n\n//------------------------------------------\n// Register crons to service.\n//------------------------------------------\nexports.register = function(service) {\n  ssdb = service.ssdb;\n  sequelize = service.sequelize;\n};\nexports.ctx = ctx;\nexports.syncTrendings = syncTrendings;\nexports.syncProjects = syncProjects;\nexports.syncReceivers = syncReceivers;\nexports.syncRules = syncRules;\nexports.startSyncTrendings = startSyncTrendings;\nexports.startSyncProjects = startSyncProjects;\nexports.startSyncReceivers = startSyncReceivers;\nexports.startSyncRules = startSyncRules;\nexports.syncProjectsOnDBFileChanges = syncProjectsOnDBFileChanges;\nexports.syncRulesOnDBFileChanges = syncRulesOnDBFileChanges;\nexports.syncReceiversOnDBFileChanges = syncReceiversOnDBFileChanges;\n\n//------------------------------------------\n// Cron jobs\n//------------------------------------------\n/**\n * Sync trendings from ssdb.\n * @return {Object} ctx.trendings\n */\nfunction *syncTrendings() {\n  var timer = util.timerStart();\n  var hash = config.ssdb.prefix + 'trend';\n  var list = yield ssdb.acquire().hgetall(hash);\n  var dict = {}, i;\n\n  for (i = 0; i < list.length; i += 2) {\n    dict[list[i]] = list[i + 1];\n  }\n\n  ctx.trendings = dict;\n  log.info(\"%dms sync trendings done, %d items\", timer.elapsed(), util.objectLength(dict));\n  return ctx.trendings;\n}\n\n/**\n * Sync projects from sqlite.\n * @return {Array} ctx.projects\n */\nfunction *syncProjects() {\n  var timer = util.timerStart();\n  var projects = yield models.Project.findAll();\n  var i, project, receivers, universals;\n\n  for (i = 0; i < projects.length; i++) {\n    project = projects[i];\n    project.rules = yield project.getRules();\n    receivers = yield project.getReceivers();\n    universals = yield models.Receiver.findAll({where: {universal: true}});\n    [].unshift.apply(receivers, universals);\n    project.receivers = receivers;\n  }\n\n  ctx.projects = projects;\n  log.info(\"%dms sync projects done, %d items\", timer.elapsed(), projects.length);\n  return ctx.projects;\n}\n\n/**\n * Sync recievers from sqlite.\n * @return {Array} ctx.receivers\n */\nfunction *syncReceivers() {\n  var timer = util.timerStart();\n  var receivers = yield models.Receiver.findAll();\n  var i, receiver;\n\n  for (i = 0; i < receivers.length; i++) {\n    receiver = receivers[i];\n    receiver.projects = receiver.getProjects();\n  }\n  ctx.receivers = receivers;\n  log.info(\"%dms sync receivers done, %d items\", timer.elapsed(), receivers.length);\n  return ctx.receivers;\n}\n\n/**\n * Sync rules from sqlite.\n * @return {Array} ctx.rules\n */\nfunction *syncRules() {\n  var timer = util.timerStart();\n  ctx.rules = yield models.Rule.findAll({\n    where: {\n      ProjectId: {$ne: null}\n    }\n  });\n  log.info(\"%dms sync rules done, %d items\", timer.elapsed(), ctx.rules.length);\n  return ctx.rules;\n}\n\n//------------------------------------------\n// Start jobs.\n//------------------------------------------\n/**\n * Start `syncTrendings`.\n * @param {Function} cb\n * @param {Number} milliSeconds\n */\nfunction startSyncTrendings(cb, milliSeconds) {\n  util.setIntervalAndRunNow(co.wrap(function *() {\n    yield syncTrendings();\n    if (cb) cb();\n  }), milliSeconds || 1000*config.interval);\n}\n\n/**\n * Start `syncProjects`.\n * @param {Function} cb\n * @param {Number} milliSeconds\n */\nfunction startSyncProjects(cb, milliSeconds) {\n  util.setIntervalAndRunNow(co.wrap(function *() {\n    yield syncProjects();\n    if (cb) cb();\n  }), milliSeconds || consts.syncIntervalDefault);\n}\n\n/**\n * Start `syncReceivers`.\n * @param {Function} cb\n * @param {Number} milliSeconds\n */\nfunction startSyncReceivers(cb, milliSeconds) {\n  util.setIntervalAndRunNow(co.wrap(function *() {\n    yield syncReceivers();\n    if (cb) cb();\n  }), milliSeconds || consts.syncIntervalDefault);\n}\n\n/**\n * Start `syncRules`.\n * @param {Function} cb\n * @param {Number} milliSeconds\n */\nfunction startSyncRules(cb, milliSeconds) {\n  util.setIntervalAndRunNow(co.wrap(function *() {\n    yield syncRules();\n    if (cb) cb();\n  }), milliSeconds || consts.syncIntervalDefault);\n}\n\n/**\n * Sync projects on dbfile changes.\n * @param {Function} cb\n * @param {Number} milliSeconds\n */\nfunction syncProjectsOnDBFileChanges(cb, milliSeconds) {\n  util.fileOnChangesWithMinIntervalAndRunNow(config.sqlite.file, co.wrap(function *() {\n    yield syncProjects();\n    if (cb) cb();\n  }), milliSeconds || consts.syncIntervalDefault);\n}\n\n/**\n * Sync rules on dbfile changes.\n * @param {Function} cb\n * @param {Number} milliSeconds\n */\nfunction syncRulesOnDBFileChanges(cb, milliSeconds) {\n  util.fileOnChangesWithMinIntervalAndRunNow(config.sqlite.file, co.wrap(function *() {\n    yield syncRules();\n    if (cb) cb();\n  }), milliSeconds || consts.syncIntervalDefault);\n}\n\n/**\n * Sync receivers on dbfile changes.\n * @param {Function} cb\n * @param {Number} milliSeconds\n */\nfunction syncReceiversOnDBFileChanges(cb, milliSeconds) {\n  util.fileOnChangesWithMinIntervalAndRunNow(config.sqlite.file, co.wrap(function *() {\n    yield syncReceivers();\n    if (cb) cb();\n  }), milliSeconds || consts.syncIntervalDefault);\n}\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/consts.js":"/**\n * @overview  Constants.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst util = require('./util');\n\nexports.syncIntervalDefault = 10 * 1000;\nexports.viewsDir = util.join(__dirname, '..', 'views');\nexports.staticDir = util.join(__dirname, '..', 'static');\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/models.js":"/**\n * @overview  Sequelize orm models.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst Sequelize = require('sequelize');\n\n/**\n * Register models with sequelize instance.\n *\n * @param {Sequelize} sequelize\n * @return {Object}  // exports\n */\nexports.register = function(sequelize) {\n  var Project = sequelize.define('Project', {\n    name: {type: Sequelize.STRING, unique: true},\n  });\n\n  var Rule = sequelize.define('Rule', {\n    pattern: {type: Sequelize.STRING, unique: true},\n    up: {type: Sequelize.BOOLEAN, defaultValue: false},\n    down: {type: Sequelize.BOOLEAN, defaultValue: false},\n    min: {type: Sequelize.DOUBLE, defaultValue: null, allowNull: true},\n    max: {type: Sequelize.DOUBLE, defaultValue: null, allowNull: true},\n  });\n\n  var Receiver = sequelize.define('Receiver', {\n    name: {type: Sequelize.STRING, unique: true},\n    email: {type: Sequelize.STRING, unique: true},\n    phone: {type: Sequelize.STRING, unique: true},\n    universal: {type: Sequelize.BOOLEAN, defaultValue: false},\n    enableEmail: {type: Sequelize.BOOLEAN, defaultValue: false},\n    enablePhone: {type: Sequelize.BOOLEAN, defaultValue: false},\n  });\n\n  Project.hasMany(Rule, {as: 'Rules'});\n  Project.belongsToMany(Receiver, {through: 'ReceiverProjects'});\n  Receiver.belongsToMany(Project, {through: 'ReceiverProjects'});\n\n  exports.Project = Project;\n  exports.Rule = Rule;\n  exports.Receiver = Receiver;\n  return exports;\n};\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/service.js":"/**\n * @overview  The based service function.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst events = require('events');\nconst fivebeans = require('fivebeans');\nconst net = require('net');\nconst ssdb = require('ssdb');\nconst Sequelize = require('sequelize');\nconst config = require('./config');\nconst log = require('./log');\nconst protocol = require('./protocol');\nconst util = require('./util');\n\n/**\n * Connection buffer parser.\n */\nfunction ConnBufferParser() {\n  this.unfinished = new Buffer('');\n}\n\n/**\n * Parse buffer to string chunks.\n *\n * @param {Buffer} buf\n * @return {Array}\n */\nConnBufferParser.prototype.parse = function(buf) {\n  var result;\n  // pick up the unfinished buffer last time\n  buf = Buffer.concat([this.unfinished, buf]);\n  result = protocol.decode(buf);\n  this.unfinished = result[1];\n  return result[0];\n};\n\n/**\n * Base service class.\n */\nfunction Service() {\n  events.EventEmitter.call(this);\n}\nutil.inherits(Service, events.EventEmitter);\n\n/**\n * Create a socket tcp server (using bell protocol).\n *\n *  @param {Number} port\n *  @param {Function} cb  // function(datapoints)\n *  @return {Service} // this\n */\nService.prototype.createSocketServer = function(port, cb) {\n  this.sock = net.createServer(function(conn) {\n    var fd = conn._handle.fd;\n    log.info(\"new connection established (fd %d)\", fd);\n    if (!conn._bufferParser) {\n      conn._bufferParser = new ConnBufferParser();\n    }\n    //------------------ conn on data -----------------------\n    conn.on('data', function(buf) {\n      var datapoints;\n      try {\n        datapoints = conn._bufferParser.parse(buf);\n      } catch (e) {\n        log.warn(\"invalid input: %s\", buf.slice(0, 45));\n        return;\n      }\n      cb(datapoints);\n    });\n    //------------------ conn on close -----------------------\n    conn.on('close', function() {\n      delete conn._bufferParser;\n      log.info(\"client disconnected (fd %d)\", fd);\n    });\n  })\n  //------------------ server on error -----------------------\n  .on('error', function(err) {\n    log.error('socket error: %s', err);\n  })\n  //-------------------- bind server -----------------------\n  .listen(port, function() {\n    log.info(\"listening on port %d..\", port);\n  });\n  return this;\n};\n\n/**\n * Create beanstalk client and patch it.\n */\nService.prototype.createBeansClient = function() {\n  var host = config.beanstalkd.host;\n  var port = config.beanstalkd.port;\n  this.beans = new fivebeans.client(host, port);\n  util.patchBeansClient(this.beans);\n  return this;\n};\n\n/**\n * Connect to beanstalkd (yield blocking).\n *\n *   @param {String} action // 'use'/'watch'\n */\nService.prototype.connectBeans = function *(action) {\n  var self = this,\n      beans = this.beans,\n      tube = config.beanstalkd.tube;\n  action = action || 'use';\n\n  beans.on('connect', function() {\n    beans[action](tube, function(err) {\n      if (err)\n        throw err;\n      log.info('beanstalkd connected, %s tube %s', action, tube);\n      self.emit('beans connected');\n    });\n  }).connect();\n\n  // yield until beans was connected\n  yield function(done) {\n    self.on('beans connected', done);\n  };\n\n  return this;\n};\n\n/**\n * Create ssdb client pool.\n *\n * @return {Service} // this\n */\nService.prototype.createSsdbPool = function() {\n  var options = {\n    port: config.ssdb.port,\n    host: config.ssdb.host,\n    size: config.ssdb.size,\n    promisify: true\n  };\n\n  if (config.ssdb.auth && config.ssdb.auth.length > 0) {\n    options.auth = config.ssdb.auth;\n  }\n  this.ssdb = ssdb.createPool(options);\n  return this;\n};\n\n/**\n * Create sequelize instance.\n *\n * @return {Service} // this\n */\nService.prototype.createSequelize = function() {\n  this.sequelize = new Sequelize(null, null, null, {\n    dialect: 'sqlite',\n    storage: config.sqlite.file,\n    logging: false,\n  });\n  return this;\n};\n\nmodule.exports = Service;\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/analyzer.js":"/**\n * @overview  Bell analyzer service.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst co = require('co');\nconst cluster = require('cluster');\nconst net = require('net');\nconst ssdb = require('ssdb');\nconst config = require('./config');\nconst log = require('./log');\nconst protocol = require('./protocol');\nconst service = require('./service');\nconst util = require('./util');\n\n/**\n * Service analyzer\n */\nfunction Analyzer() {}\nutil.inherits(Analyzer, service);\n\n/**\n * Analyzer service entry:\n *\n *   * In master, fork workers\n *   * In worker, init clients and do work.\n */\nAnalyzer.prototype.serve = function *() {\n  var i, worker;\n\n  if (cluster.isMaster) {\n    for (i = 0; i < config.analyzer.workers; i++) {\n      worker = cluster.fork();\n      log.info(\"forked worker process: %d\", worker.process.pid);\n    }\n  } else {\n    this.createSsdbPool();\n    this.createBeansClient();\n    yield this.connectBeans('watch');\n    yield this.work();\n  }\n};\n\n/**\n * Reserve job from beanstalk and do work.\n */\nAnalyzer.prototype.work = function *() {\n  var self = this;\n  var job = yield this.beans._reserve();\n  var datapoint = JSON.parse(job.body);\n  var startAt = new Date();\n  var result = yield this.analyze(datapoint);\n  var name = result[0];\n  var key = result[1];\n  var endAt = new Date();\n\n  log.info(\"%dms analyzed %s: %s\", endAt - startAt, name, key);\n\n  this.beans.destroy(job.id, function(){});\n\n  process.nextTick(co.wrap(function *() {\n    yield self.work();\n  }));\n};\n\n/**\n * Analyze current datapoint, return the array of metric name\n * and zset key.\n *\n * @param {Array} datapoint // [name, [time, val]]\n * @return {Array} // [name, key]\n */\nAnalyzer.prototype.analyze = function *(datapoint) {\n  var name = datapoint[0];\n  var time = +datapoint[1][0];\n  var data = +datapoint[1][1];\n\n  datapoint = [name, [time, data]];\n\n  var history = yield this.query(datapoint);\n  var item = this.div3sigma(history[1]);\n  var multi = item[0], mean = item[1];\n  var trend = this.trend(history[0], multi);\n\n  datapoint[1].push(multi);\n\n  var key;\n  try {\n    key = yield this.save(datapoint, trend);\n  } catch (err){\n    if (err instanceof ssdb.SSDBError) {\n      log.error(\"failed to save %s: %s\", name, err.message);\n    }\n  }\n\n  if (Math.abs(multi) > 1) {\n    this.alert(datapoint, trend, mean);\n  }\n  return [name, key];\n};\n\n/**\n * Query history data, include history datapoints & current\n * trend.\n *\n * @param {Array} datapoint [name, [time, val]]\n * @return {Array} // [trend, datapoint..]\n *\n * - trend\n *    {Number} if current is not defined yet, undefined\n * - series\n *    {Array}  // array of numbers\n */\nAnalyzer.prototype.query = function *(datapoint) {\n  //----------------------------------------------------\n  // Vars definitions\n  //----------------------------------------------------\n  var name = datapoint[0];\n  var time = datapoint[1][0];\n  var data = datapoint[1][1];\n\n  var offset = config.analyzer.filterOffset;\n  var period = config.analyzer.periodicity;\n  var expiration = config.analyzer.expiration;\n  var prefix = config.ssdb.prefix;\n  var span = offset * period;\n  var reqs = [];\n\n  //----------------------------------------------------\n  // Query trending\n  //----------------------------------------------------\n  var hash = prefix + 'trend';\n  reqs.push(this.ssdb.acquire().hget(hash, name));\n\n  //----------------------------------------------------\n  // Query history data\n  //----------------------------------------------------\n  var now = time;\n  var zset = prefix + name;\n  var start, stop;\n  var args = [];\n\n  while(now - time < expiration) {\n    start = time - span;\n    stop = time + span;\n    reqs.push(this.ssdb.acquire().zkeys(zset, '', start, stop, -1));\n    args.push([start, stop]);\n    time -= period;\n  }\n\n  var chunks = yield reqs;\n\n  //----------------------------------------------------\n  // Build trending\n  //----------------------------------------------------\n  var trend = NaN;\n  var first = chunks.shift();\n\n  if (typeof first === 'string' || first instanceof String) {\n    trend = +(first.split(':')[0]);\n  }\n\n  //----------------------------------------------------\n  // Build series\n  //----------------------------------------------------\n  // extract series from chunks\n  var series = [], values, pairs, i, j, chunk, item, pair;\n\n  for (i = chunks.length - 1; i >= 0; i--) {\n    chunk = chunks[i];\n    pairs = [];\n    for (j = 0; j < chunk.length; j++) {\n      item = chunk[j].split(':');\n      pair = [+item[0], +item[1]]; // [val, stamp]\n      pairs.push(pair);\n    }\n    values = this.fillBlanks(name, pairs, args[i][0], args[i][1]);\n    [].push.apply(series, values);\n  }\n\n  series.push(data);\n  return [trend, series];\n};\n\n/**\n * Fill the blank values for a chunk.\n * @param {String} name\n * @param {Array} pairs  // [[val, stamp], ..]\n * @param {Number} start\n * @param {Number} stop\n */\nAnalyzer.prototype.fillBlanks = function(name, pairs, start, stop) {\n  var values = [], i;\n  var flag = false;\n\n  if (name.indexOf('counter.') === 0) {\n    if (config.analyzer.fillBlankCounters) {\n      flag = true;\n    }\n  } else if (name.indexOf('timer.') === 0) {\n    if (config.analyzer.fillBlankTimers) {\n      flag = true;\n    }\n  }\n\n  if (!flag) {\n    for (i = 0; i < pairs.length; i++) {\n      values.push(pairs[i][0]);\n    }\n    return values;\n  }\n\n  var step = config.interval;\n  var item, data, time, value;\n  i = 0;\n\n  while  (start < stop) {\n    item = pairs[i];\n\n    if (item) {\n      data = pairs[i][0];\n      time = pairs[i][1];\n      while (start < time) {\n        start += step;\n        if (start > time) {\n          values.push(data);\n        } else {\n            values.push(0);\n        }\n      }\n      values.push(data);\n    } else {\n      if (values.length > 1 && values[0] !== 0)\n        // Fill zeros only if it's not the first non-zero point\n        values.push(0);\n    }\n\n    start += step;\n    i += 1;\n  }\n  return values;\n};\n\n/**\n * Compute next trend via wma, called the weighted moving\n * average algorithm:\n *\n *   t[0] = x[1], factor: 0~1\n *   t[n] = t[n-1] * (1 - factor) + factor * x[n]\n *\n * @param {Number} last  // last trend\n * @param {Number} data  // current data\n*/\nAnalyzer.prototype.trend = function(last, data) {\n  if (isNaN(last)) {\n    // set current data as first trend\n    return data;\n  }\n\n  var factor = config.analyzer.trendingFactor;\n  return last * (1 - factor) + factor * data;\n};\n\n\n/**\n * Compute the 3-sigma multiples, also like the z-score.\n *\n * What's 3-sigma:\n *\n *   states that nearly all values(99.7%) lie within 3 standard\n *   deviations of the mean in a normal distribution.\n *\n * What's z-score:\n *\n *   (val - mean) / stddev\n *\n * Return the multiples of the deviation to 3 * sigma, or\n * called 1/3 zscore.\n * @param {Array} series\n * @return {Array} // [multi, mean]\n */\nAnalyzer.prototype.div3sigma = function(series) {\n  var strict = config.analyzer.strict;\n  var startSize = config.analyzer.startSize;\n\n  if (series.length === 0)\n    return [0, 0];\n\n  var arr = new util.ReadOnlyArray(series);\n  var mean = arr.mean();\n  var std = arr.std();\n\n  if (series.length < startSize) {\n    return [0, mean];\n  }\n\n  // use the last if strict mode, else the mean of last 3 members\n  var tail;\n\n  if (strict) {\n    tail = series.slice(-1)[0];\n  } else {\n    tail = new util.ReadOnlyArray(series.slice(-3)).mean();\n  }\n\n  if (std === 0) {\n    return [tail - mean === 0 ? 0 : 1, mean];\n  }\n\n  return [(tail - mean) / (3 * std), mean];\n};\n\n/**\n * Save datapoint & trend to database\n * @param {Array} datapoint // [name, [time, val, multi]]\n * @param {Number} trend\n * @return {String}\n */\n\nAnalyzer.prototype.save = function *(datapoint, trend) {\n  var name = datapoint[0];\n  var time = datapoint[1][0];\n  var data = datapoint[1][1];\n  var multi = datapoint[1][2];\n\n  var prefix = config.ssdb.prefix;\n  var expiration = config.analyzer.expiration;\n\n  var zset = prefix + name;\n  var hash = prefix + 'trend';\n  var key = [data, multi.toFixed(4), time].join(':');\n  var val = [trend.toFixed(4), time].join(':');\n\n  // parallel write db\n  var resps = yield [\n    this.ssdb.acquire().zset(zset, key, time),\n    this.ssdb.acquire().zremrangebyscore(zset, 0, time - expiration),\n    this.ssdb.acquire().hset(hash, name, val)\n  ];\n\n  return key;\n};\n\n/**\n * Connect to alerter service.\n * @param {Function} callback // function() {}\n * @return {Analyzer} // this\n */\nAnalyzer.prototype.connectAlerter = function(callback) {\n  var self = this;\n  var port = config.alerter.port;\n  var host = config.alerter.host;\n\n  this.alerterConn = net.connect({port: port, host: host}, function() {\n    callback();\n  })\n  .on('error', function(e) {\n    log.warn('alerter may not be up on %s:%d, %s', host, port, e);\n    self.alerterConn.destroy();\n    self.alerterConn = undefined;\n  });\n\n  return this;\n};\n\n/**\n * Send anomalous datapoint & trend to alerter\n * @param {Array} datapoint // [name, [time, value, multi]]\n * @param {Number} trend\n * @param {Number} mean\n */\nAnalyzer.prototype.alert = function(datapoint, trend, mean) {\n  var self = this, buffer;\n  if (!this.alerterConn) {\n    this.connectAlerter(function(){\n      self.alert(datapoint, trend, mean);\n    });\n  } else {\n    buffer = protocol.encode([datapoint, trend, mean]);\n    this.alerterConn.write(buffer, 'utf8', function(){\n      log.info('send to alerter: %s', [datapoint, trend, mean]);\n    });\n  }\n};\n\nmodule.exports = new Analyzer();\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/webapp.js":"/**\n * @overview  Bell webapp service.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n// jshint -W124\n\n'use strict';\n\nconst co = require('co');\nconst cluster = require('cluster');\nconst koa = require('koa');\nconst config = require('./config');\nconst crons = require('./crons');\nconst handlers = require('./handlers');\nconst log = require('./log');\nconst middlewares = require('./middlewares');\nconst models = require('./models');\nconst service = require('./service');\nconst views = require('./views');\nconst util = require('./util');\n\n/**\n * Service analyzer\n */\nfunction WebApp() {}\nutil.inherits(WebApp, service);\n\n/**\n * Serve entry\n */\nWebApp.prototype.serve = function *() {\n  var i, worker;\n  var self = this;\n\n  if (cluster.isMaster) {\n    for (i = 0; i < config.webapp.workers; i++) {\n      worker = cluster.fork();\n      log.info(\"forked worker, pid %d\", worker.process.pid);\n    }\n  } else {\n    this.app = koa();\n    this.createSsdbPool();\n    this.createSequelize();\n    models.register(this.sequelize);\n    crons.register(this);\n    middlewares.register(this);\n    handlers.register(this);\n    views.register(this);\n    this.app.listen(config.webapp.port);\n    yield this.sequelize.sync();\n    crons.startSyncTrendings();\n  }\n};\n\nmodule.exports = new WebApp();\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/handlers/index.js":"/**\n * @overview  API Handlers.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst config = require('./config');\nconst errors = require('./errors');\nconst metric = require('./metric');\nconst project = require('./project');\nconst receiver = require('./receiver');\nconst rule = require('./rule');\n\n//------------------------------------------\n// Register all handlers to service.\n//------------------------------------------\nexports.register = function(service) {\n  errors.register(service);\n  config.register(service);\n  metric.register(service);\n  project.register(service);\n  receiver.register(service);\n  rule.register(service);\n};\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/handlers/config.js":"/**\n * @overview  Handler config.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n// jshint -W124\n\n'use strict';\n\nconst clone = require('clone');\nconst route = require('koa-route');\nconst config = require('../config');\nconst url = require('../url');\n\n//------------------------------------------\n// Register config handler to service.\n//------------------------------------------\nexports.register = function(service) {\n  service.app.use(route.get(url('/api/admin/config'), get));\n};\n\n/*\n * Get config.\n *\n * @api /api/config\n * @method GET\n * @return {Object}\n */\nfunction *get() {\n  var conf = clone(config);\n  // shadow secrets\n  conf.ssdb.auth = '******';\n  conf.webapp.auth = '******';\n  delete conf.emitter;\n  this.body = conf;\n}\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/url.js":"/**\n * @overview  Url builder with root path.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst config = require('./config');\nconst util = require('./util');\n\n/**\n * Build url by route and params, e.g.\n *\n *   url('/user', {name: 'foo', age: 17})\n *   // => '/user?name=foo&age=17'\n *\n *  @param {String} route\n *  @param {Object} params\n *  @return {String}\n */\n\nmodule.exports = function(route, params) {\n  var s;\n  if (config.webapp.root) {\n    s = util.join('/', config.webapp.root, route);\n  } else {\n    s = util.join('/', route);\n  }\n  return util.urlEncode(s, params);\n};\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/handlers/errors.js":"/**\n * @overview  API Errors\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n// jshint -W124\n\n'use strict';\n\nconst errors = {\n  ErrProjectName:              {code: 400, msg: \"Invalid project name\"},\n  ErrProjectId:                {code: 400, msg: \"Invalid project id\"},\n  ErrProjectNotFound:          {code: 404, msg: \"Project not found\"},\n  ErrProjectDuplicateName:     {code: 403, msg: \"Duplicate project name\"},\n  ErrRulePattern:              {code: 400, msg: \"Invalid rule pattern\"},\n  ErrRuleContent:              {code: 400, msg: \"Invalid rule content\"},\n  ErrRuleTrend:                {code: 400, msg: \"Either trend up or down should be checked\"},\n  ErrRuleId:                   {code: 400, msg: \"Invalid rule id\"},\n  ErrRuleNotFound:             {code: 404, msg: \"Rule not found\"},\n  ErrRuleDuplicatePattern:     {code: 403, msg: \"Duplicate rule pattern\"},\n  ErrEmail:                    {code: 400, msg: \"Invalid email address\"},\n  ErrPhone:                    {code: 400, msg: \"Invalid phone number\"},\n  ErrReceiverId:               {code: 400, msg: \"Invalid receiver id\"},\n  ErrReceiverName:             {code: 400, msg: \"Invalid receiver name\"},\n  ErrReceiverUniversal:        {code: 400, msg: \"Invalid receiver universal\"},\n  ErrReceiverDuplicateName:    {code: 403, msg: \"Duplicate receiver name\"},\n  ErrReceiverDuplicateEmail:   {code: 403, msg: \"Duplicate receiver email\"},\n  ErrReceiverDuplicatePhone:   {code: 403, msg: \"Duplicat receiver phone\"},\n  ErrReceiverNotFound:         {code: 404, msg: \"Receiver not found\"},\n  ErrReceiverProjectDuplicate: {code: 403, msg: \"Duplicate receiver to project\"},\n  ErrReceiverEnableEmail:      {code: 400, msg: \"Invalid receiver enableEmail\"},\n  ErrReceiverEnablePhone:      {code: 400, msg: \"Invalid receiver enablePhone\"},\n  ErrReceiverRemove:           {code: 404, msg: \"No receiver was removed\"},\n};\n\nmodule.exports = errors;\nerrors.register = function(service) {\n  service.app.use(function*(next) {\n    try {\n      yield next;\n    } catch(err) {\n      if (!(err instanceof Error)) {\n        this.status = err.code;\n        this.body = {msg: err.msg};\n      } else {\n        this.status = 500;\n        throw err;\n      }\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/handlers/metric.js":"/**\n * @overview  Handler metric.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst minimatch = require('minimatch');\nconst route = require('koa-route');\nconst config = require('../config');\nconst crons = require('../crons');\nconst errors = require('./errors');\nconst models = require('../models');\nconst url = require('../url');\nconst validators = require('./validators');\n\nvar ssdb;\n\n//------------------------------------------\n// Register metric handler to service.\n//------------------------------------------\nexports.register = function(service) {\n  ssdb = service.ssdb;\n  service.app.use(route.get(url('/api/metric/names'), getNames));\n  service.app.use(route.get(url('/api/metric/data'), getData));\n};\n\n//------------------------------------------\n// Util functions\n//------------------------------------------\n/**\n * Filter metric names by pattern.\n * @param {String} pattern\n * @return {Array}\n */\nfunction filterTrendings(pattern) {\n  return Object.keys(crons.ctx.trendings)\n  .filter(minimatch.filter(pattern));\n}\n\n/**\n * Get project by id (with rules)\n * @param {Number} id\n * @return {Project}\n * @throws ErrProjectId/ErrProjectNotFound\n */\nfunction *getProjectById(id) {\n id = validators.validateProjectId(id);\n  var project = yield models.Project.findById(id);\n  if (!project)\n    throw errors.ErrProjectNotFound;\n  project.rules = yield project.getRules();\n  return project;\n}\n\n//------------------------------------------\n// Metric API\n//------------------------------------------\n/**\n * Get current metric names.\n * @api /api/metric/names\n * @method GET\n * @param {Number} limit\n * @param {String} sort\n * @param {Number} project\n * @param {String} pattern\n * @return {Object}\n * @throws ErrProjectNotFound/ErrProjectId\n */\nfunction *getNames() {\n  var limit = +this.query.limit || 50;\n  var sort = this.query.sort || 'up';\n  var projectId = this.query.project;\n  var pattern = this.query.pattern || '*';\n  var keys = [], project, i, p;\n\n  if (projectId) {\n    project = yield getProjectById(+projectId);\n    for (i = 0; i < project.rules.length; i++) {\n      p = project.rules[i].pattern;\n      [].push.apply(keys, filterTrendings(p));\n    }\n  } else {\n    keys = filterTrendings(pattern);\n  }\n\n  var trends = {}, times = {};\n  var key, val, item;\n\n  for (i = 0; i < keys.length; i++) {\n    key = keys[i];\n    val = crons.ctx.trendings[key];\n    item = val.split(':');\n    trends[key] = +item[0];\n    times[key] = +item[1];\n  }\n\n  // caculate stats\n  var total = keys.length, mcount = 0;\n\n  for (i = 0; i < keys.length; i++) {\n    if (trends[keys[i]] >= 1)\n      mcount += 1;\n  }\n\n  // sort by `p / ((t + 2) ^ 1.5)`\n  // https://github.com/eleme/bell.js/issues/28\n  var now = Math.round(+new Date() / 1000),\n    desc = sort === 'up' ? 1 : -1;\n\n  keys.sort(function(a, b) {\n    var x = trends[a] / Math.pow(2 + now - times[a], 1.5);\n    var y = trends[b] / Math.pow(2 + now - times[b], 1.5);\n    return desc * (y - x);\n  });\n\n  // yield response\n  var names = [];\n  keys = keys.slice(0, limit);\n\n  for (i = 0; i < keys.length; i++) {\n    names.push([keys[i], trends[keys[i]]]);\n  }\n\n  this.body = {\n    total: total,\n    mcount: mcount,\n    names: names\n  };\n}\n\n/**\n * Get metric datapints.\n * @api /api/metric/data\n * @method GET\n * @param {String} name\n * @param {String} type\n * @param {Number} start\n * @param {Number} stop\n * @return {Object}\n * @throws Null\n */\nfunction *getData() {\n  var name = this.request.query.name;\n  var type = this.request.query.type;\n  var start = +this.request.query.start;\n  var stop = +this.request.query.stop;\n\n  var zset = config.ssdb.prefix + name;\n  var list = yield ssdb.acquire().zkeys(zset, '', start, stop, -1);\n  var idx = type === 'v' ? 0 : 1;\n\n  var vals = [], times = [], i, item;\n\n  for (i = 0; i < list.length; i++) {\n    item = list[i].split(':');\n    vals.push(+item[idx]);\n    times.push(+item[2]);\n  }\n\n  var trend = +crons.ctx.trendings[name].split(':')[0];\n  this.body = {\n    name: name,\n    times: times,\n    vals: vals,\n    trend: trend\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/handlers/validators.js":"/**\n * @overview  Parameter validators.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst errors = require('./errors');\n\n/**\n * Validate project name.\n * @param {String} name\n * @return {String}\n * @throws ErrProjectName\n */\nexports.validateProjectName = function(name) {\n  name = name || '';\n  name = name.trim();\n  if (name.length === 0)\n    throw errors.ErrProjectName;\n  return name;\n};\n\n/**\n * Validate project id.\n * @param {String} id\n * @return {Number}\n * @throws ErrProjectId\n */\nexports.validateProjectId = function(id) {\n  id = +id;\n  if (isNaN(id) || id < 0)\n    throw errors.ErrProjectId;\n  return id;\n};\n\n/**\n * Validate rule pattern.\n * @param {String} pattern\n * @return {String}\n * @throws ErrRulePattern\n */\nexports.validateRulePattern = function(pattern) {\n  pattern = pattern || '';\n  pattern = pattern.trim();\n  if (pattern.length === 0)\n    throw errors.ErrRulePattern;\n  return pattern;\n};\n\n/**\n * Validate rule content.\n * @param {Object} data\n * @return {String} content\n * @throws ErrRuleContent\n */\nexports.validateRuleContent = function(data) {\n  if (typeof data.up !== 'boolean' ||\n      typeof data.down !== 'boolean' ||\n      (data.min !== null && typeof data.min !== 'number') ||\n        (data.max !== null && typeof data.max !== 'number'))\n        throw errors.ErrRuleContent;\n  if (!data.up && !data.down)\n    throw errors.ErrRuleTrend;\n   return data;\n};\n\n/**\n * Validate rule id.\n * @param {String} id\n * @return {Number}\n * @throws ErrRuleId\n */\nexports.validateRuleId = function(id) {\n  id = +id;\n  if (isNaN(id) || id < 0)\n    throw errors.ErrRuleId;\n  return id;\n};\n\n/**\n * Validate receiver id.\n * @param {Number} id\n * @return {Number}\n * @throws ErrReceiverId\n */\nexports.validateReceiverId = function(id) {\n  id = +id;\n  if (isNaN(id) || id < 0)\n    throw errors.ErrReceiverId;\n  return id;\n};\n\n/**\n * Validate receiver name.\n * @param {String} name\n * @return {String}\n * @throws ErrReceiverName\n */\nexports.validateReceiverName = function(name) {\n  name = name || '';\n  name = name.trim();\n  if (name.length === 0)\n    throw errors.ErrReceiverName;\n  return name;\n};\n\n/**\n * Validate email.\n * @param {String} email\n * @return {String}\n * @throws ErrEmail\n */\nexports.validateEmail = function(email) {\n  if (email.indexOf('@') <= 0)\n    throw errors.ErrEmail;\n  return email.trim();\n};\n\n/**\n * Validate phone.\n * @param {String} phone\n * @return {String}\n * @throws ErrPhone\n */\nexports.validatePhone = function(phone) {\n  if (phone.match(/^\\d{10,11}/)) {\n    return phone.trim();\n  }\n  throw errors.ErrPhone;\n};\n\n/**\n * Validate receiver universal.\n * @param {Boolean} universal\n * @return {Boolean}\n * @throws ErrReceiverUniversal\n */\nexports.validateReceiverUniversal = function(universal) {\n  if (typeof universal === 'undefined')\n    universal = false;\n  if (typeof universal !== 'boolean')\n    throw errors.ErrReceiverUniversal;\n  return universal;\n};\n\n/**\n * Validate receiver `enableEmail`\n * @param {Boolean} enableEmail\n * @return {Boolean}\n * @throws ErrReceiverEnableEmail\n */\nexports.validateReceiverEnableEmail = function(enableEmail) {\n  if (typeof enableEmail === 'undefined')\n    enableEmail = false;\n  if (typeof enableEmail !== 'boolean')\n    throw errors.ErrReceiverEnableEmail;\n  return enableEmail;\n};\n\n/**\n * Validate receiver `enablePhone`\n * @param {Boolean} enablePhone\n * @return {Boolean}\n * @throws ErrReceiverEnablePhone\n */\nexports.validateReceiverEnablePhone = function(enablePhone) {\n  if (typeof enablePhone === 'undefined')\n    enablePhone = false;\n  if (typeof enablePhone !== 'boolean')\n    throw errors.ErrReceiverEnablePhone;\n  return enablePhone;\n};\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/handlers/project.js":"/**\n * @overview  Handler project.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst route = require('koa-route');\nconst Sequelize = require('sequelize');\nconst errors = require('./errors');\nconst models = require('../models');\nconst url = require('../url');\nconst validators = require('./validators');\nconst util = require('../util');\n\n//------------------------------------------\n// Register project handler to service.\n//------------------------------------------\nexports.register = function(service) {\n  service.app.use(route.get(url('/api/projects'), getAll));\n  service.app.use(route.get(url('/api/project/:id'), get));\n  service.app.use(route.post(url('/api/admin/project'), create));\n  service.app.use(route.del(url('/api/admin/project/:id'), del));\n  service.app.use(route.patch(url('/api/admin/project/:id'), patch));\n  service.app.use(route.get(url('/api/admin/project/:id/receivers'), getReceivers));\n  service.app.use(route.get(url('/api/admin/project/:id/rules'), getRules));\n};\n\n//------------------------------------------\n// Project handlers\n//------------------------------------------\n/**\n * Get all projects.\n * @api /api/projects\n * @method GET\n * @return {Array}\n */\nfunction *getAll() {\n  this.body = yield models.Project.findAll();\n}\n\n/**\n * Create project.\n * @api /api/admin/project\n * @method POST\n * @param {String} name\n * @return {Project}\n * @throws ErrProjectDuplicateName/ErrProjectName\n */\nfunction *create() {\n  var name = this.request.body.name;\n  name = validators.validateProjectName(name);\n  try {\n    this.body = yield models.Project.create({name: name});\n  } catch(err) {\n    if (err instanceof Sequelize.UniqueConstraintError)\n      throw errors.ErrProjectDuplicateName;\n    throw err;\n  }\n}\n\n/**\n * Get project by id.\n * @api /api/project/:id\n * @method GET\n * @return {Project}\n * @throws ErrProjectNotFound/ErrProjectId\n */\nfunction *get(id) {\n  id = validators.validateProjectId(id);\n  var project = yield models.Project.findById(id);\n  if (!project)\n    throw errors.ErrProjectNotFound;\n  this.body = project;\n}\n\n/**\n * Delete project by id.\n * @api /api/admin/project/:id\n * @method DELETE\n * @return NoContent\n * @throws ErrProjectNotFound/ErrProjectId\n */\nfunction *del(id) {\n  id = validators.validateProjectId(id);\n  var project = yield models.Project.findById(id);\n  if (!project)\n    throw errors.ErrProjectNotFound;\n  yield models.Rule.destroy({where: {ProjectId: project.id}});\n  yield project.removeReceivers();\n  yield project.destroy();\n  this.status = 204;\n}\n\n/**\n * Patch project by id.\n * @api /api/admin/project/:id\n * @method PATCH\n * @param {String} name\n * @return NoContent\n * @throws ErrProjectNotFound/ErrProjectId/ErrProjectName\n */\nfunction *patch(id) {\n  id = validators.validateProjectId(id);\n  var project = yield models.Project.findById(id);\n  if (!project)\n    throw errors.ErrProjectNotFound;\n  var name = this.request.body.name;\n  project.name = validators.validateProjectName(name);\n  try {\n    yield project.save();\n  } catch(err) {\n    if (err instanceof Sequelize.UniqueConstraintError)\n      throw errors.ErrProjectDuplicateName;\n    throw err;\n  }\n  this.status = 204;\n}\n\n/**\n * Get receivers by project id. (with universal receivers)\n * @api /api/admin/project/:id/receivers\n * @method GET\n * @return {Array}\n * @throws ErrProjectNotFound/ErrProjectId..\n */\nfunction *getReceivers(id) {\n  id = validators.validateProjectId(id);\n  var project = yield models.Project.findById(id);\n  if (!project)\n    throw errors.ErrProjectNotFound;\n  var receivers = yield project.getReceivers();\n  var universals = yield models.Receiver.findAll({where: {universal: true}});\n  [].unshift.apply(receivers, universals);\n  this.body = util.uniqueArray(receivers, function(a, b) {\n    return a.id === b.id;\n  });\n}\n\n/**\n * Get rules by project id.\n * @api /api/admin/project/:id/rules\n * @method GET\n * @return {Array}\n * @throws ErrProjectNotFound/ErrProjectId\n */\nfunction *getRules(id) {\n  id = validators.validateProjectId(id);\n  var project = yield models.Project.findById(id);\n  if (!project)\n    throw errors.ErrProjectNotFound;\n  this.body = yield project.getRules();\n}\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/handlers/receiver.js":"/**\n * @overview  Handler receiver.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst route = require('koa-route');\nconst Sequelize = require('sequelize');\nconst errors = require('./errors');\nconst models = require('../models');\nconst url = require('../url');\nconst validators = require('./validators');\n\n//------------------------------------------\n// Register receiver handler to service.\n//------------------------------------------\nexports.register = function(service) {\n  service.app.use(route.get(url('/api/admin/receivers'), getAll));\n  service.app.use(route.post(url('/api/admin/project/:id/receiver'), add));\n  service.app.use(route.post(url('/api/admin/receiver'), create));\n  service.app.use(route.del(url('/api/admin/project/:projectId/receiver/:receiverId'), remove));\n  service.app.use(route.get(url('/api/admin/receiver/:id'), get));\n  service.app.use(route.get(url('/api/admin/receiver/:id/projects'), getProjects));\n  service.app.use(route.patch(url('/api/admin/receiver/:id'), patch));\n  service.app.use(route.del(url('/api/admin/receiver/:id'), del));\n};\n\n//------------------------------------------\n// Receiver handlers\n//------------------------------------------\n/**\n * Create receiver.\n * @api /api/admin/receiver\n * @method POST\n * @param {String} name\n * @param {String} email\n * @param {String} phone\n * @param {Boolean} univeral\n * @param {Boolean} enableEmail\n * @param {Boolean} enablePhone\n * @return {Receiver}\n * @throws ErrReceiver..\n */\nfunction *create() {\n  var data = {};\n  data.name = validators.validateReceiverName(this.request.body.name);\n  data.email = validators.validateEmail(this.request.body.email);\n  data.phone = validators.validatePhone(this.request.body.phone);\n  data.universal = validators.validateReceiverUniversal(this.request.body.universal);\n  data.enableEmail = validators.validateReceiverEnableEmail(this.request.body.enableEmail);\n  data.enablePhone = validators.validateReceiverEnablePhone(this.request.body.enablePhone);\n  try {\n    this.body = yield models.Receiver.create(data);\n  } catch(err) {\n    if (err instanceof Sequelize.UniqueConstraintError) {\n      switch(err.fields[0]) {\n          case 'name':\n              throw errors.ErrReceiverDuplicateName;\n          case 'email':\n              throw errors.ErrReceiverDuplicateEmail;\n          case 'phone':\n              throw errors.ErrReceiverDuplicatePhone;\n      }\n    }\n    throw err;\n  }\n}\n\n/**\n * Get all receivers.\n * @api /api/admin/receivers\n * @method GET\n * @return {Array}\n */\nfunction *getAll() {\n  this.body = yield models.Receiver.findAll();\n}\n\n/**\n * Add receiver to project.\n * @api /api/admin/project/:id/receiver\n * @method POST\n * @param {String} name\n * @return {Receiver}\n * @throws ErrReceiverNotFound/ErrProjectNotFound/ErrReceiverProjectDuplicate..\n */\nfunction *add(id) {\n  id = validators.validateProjectId(id);\n  var project = yield models.Project.findById(id);\n  if (!project)\n    throw errors.ErrProjectNotFound;\n  var name = validators.validateReceiverName(this.request.body.name);\n  var receiver = yield models.Receiver.findOne({where: {name: name}});\n  if (!receiver)\n    throw errors.ErrReceiverNotFound;\n  if (receiver.universal)\n    throw errors.ErrReceiverProjectDuplicate;\n  if (yield project.hasReceiver(receiver))\n    throw errors.ErrReceiverProjectDuplicate;\n  yield project.addReceiver(receiver);\n  this.body = receiver;\n}\n\n/**\n * Remove receiver from project.\n * @api /api/admin/project/:projectId/receiver/:receiverId\n * @method DELETE\n * @param {Number} projectId\n * @param {Number} receiverId\n * @return NoContent\n * @throws ErrProjectNotFound/ErrProjectId..\n */\nfunction *remove(projectId, receiverId) {\n  projectId = validators.validateProjectId(projectId);\n  receiverId = validators.validateReceiverId(receiverId);\n  var project = yield models.Project.findById(projectId);\n  if (!project)\n    throw errors.ErrProjectNotFound;\n  var receiver = yield models.Receiver.findById(receiverId);\n  if (!receiver)\n    throw errors.ErrReceiverNotFound;\n  var num = yield project.removeReceiver(receiver);\n  if (!num)\n    throw errors.ErrReceiverRemove;\n  this.status = 204;\n}\n\n/**\n * Get receiver by id.\n * @api /api/admin/receiver/:id\n * @method GET\n * @return {Receiver}\n * @throws ErrReceiverId/ErrReceiverNotFound\n */\nfunction *get(id) {\n  id = validators.validateReceiverId(id);\n  var receiver = yield models.Receiver.findById(id);\n  if (!receiver)\n    throw errors.ErrReceiverNotFound;\n  this.body = receiver;\n}\n\n/**\n * Delete receiver by id.\n * @api /api/admin/receiver/:id\n * @method DELETE\n * @return NoContent\n * @throws ErrReceiverId/ErrReceiverNotFound\n */\nfunction *del(id) {\n  id = validators.validateReceiverId(id);\n  var receiver = yield models.Receiver.findById(id);\n  if (!receiver)\n    throw errors.ErrReceiverNotFound;\n  yield receiver.removeProjects();\n  yield receiver.destroy();\n  this.status = 204;\n}\n\n/**\n * Get projects by receiver id.\n * @api /api/admin/receiver/:id/projects\n * @method GET\n * @return {Array}\n * @throws ErrReceiverId/ErrReceiverNotFound\n */\nfunction *getProjects(id) {\n  id = validators.validateReceiverId(id);\n  var receiver = yield models.Receiver.findById(id);\n  if (!receiver)\n    throw errors.ErrReceiverNotFound;\n  if (receiver.universal) {\n    this.body = yield models.Project.findAll();\n  } else {\n    this.body = yield receiver.getProjects();\n  }\n}\n\n/**\n * Patch receiver.\n * @api /api/admin/receiver/:id\n * @method PATCH\n * @param {String} name\n * @param {String} email\n * @param {String} phone\n * @param {Boolean} univeral\n * @param {Boolean} enableEmail\n * @param {Boolean} enablePhone\n * @return NoContent\n * @throws ErrReceiverId/ErrReceiverNotFound\n */\nfunction *patch(id) {\n  id = validators.validateReceiverId(id);\n  var receiver = yield models.Receiver.findById(id);\n  if (!receiver)\n    throw errors.ErrReceiverNotFound;\n  receiver.name = validators.validateReceiverName(this.request.body.name);\n  receiver.email = validators.validateEmail(this.request.body.email);\n  receiver.phone = validators.validatePhone(this.request.body.phone);\n  receiver.universal = validators.validateReceiverUniversal(this.request.body.universal);\n  receiver.enableEmail = validators.validateReceiverEnableEmail(this.request.body.enableEmail);\n  receiver.enablePhone = validators.validateReceiverEnablePhone(this.request.body.enablePhone);\n  try {\n    yield receiver.save();\n  } catch(err) {\n    if (err instanceof Sequelize.UniqueConstraintError) {\n      switch(err.fields[0]) {\n          case 'name':\n              throw errors.ErrReceiverDuplicateName;\n          case 'email':\n              throw errors.ErrReceiverDuplicateEmail;\n          case 'phone':\n              throw errors.ErrReceiverDuplicatePhone;\n      }\n    }\n    throw err;\n  }\n  this.status = 204;\n}\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/handlers/rule.js":"/**\n * @overview  Handler rule.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst route = require('koa-route');\nconst Sequelize = require('sequelize');\nconst errors = require('./errors');\nconst models = require('../models');\nconst url = require('../url');\nconst validators = require('./validators');\n\n//------------------------------------------\n// Register rule handler to service.\n//------------------------------------------\nexports.register = function(service) {\n  service.app.use(route.post(url('/api/admin/project/:id/rule'), add));\n  service.app.use(route.del(url('/api/admin/rule/:id'), del));\n};\n\n//------------------------------------------\n// Rule handlers\n//------------------------------------------\n/**\n * Add rule to project.\n * @api /api/admin/project/:id/rule\n * @method POST\n * @param {String} pattern\n * @param {Boolean} up\n * @param {Boolean} down\n * @param {Number} min\n * @param {Number} max\n * @return {Rule}\n * @throws ErrProjectNotFound/ErrProjectId/ErrRuleContent\n */\nfunction *add(id) {\n  id = validators.validateProjectId(id);\n  var project = yield models.Project.findById(id);\n  if (!project)\n    throw errors.ErrProjectNotFound;\n  var data = validators.validateRuleContent(this.request.body);\n  data.pattern = validators.validateRulePattern(data.pattern);\n  try {\n    this.body = yield project.createRule(data);\n  } catch(err) {\n    if (err instanceof Sequelize.UniqueConstraintError)\n      throw errors.ErrRuleDuplicatePattern;\n    throw err;\n  }\n}\n\n/**\n * Delete rule by id.\n * @api /api/admin/rule/:id\n * @method DELETE\n * @return NoContent\n * @throws ErrRuleNotFound/ErrRuleId\n */\nfunction *del(id) {\n id = validators. validateRuleId(id);\n var rule = yield models.Rule.findById(id);\n if (!rule)\n   throw errors.ErrRuleNotFound;\n yield rule.destroy();\n this.status = 204;\n}\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/middlewares.js":"/**\n * @overview  Webapp middlewares.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst auth = require('koa-basic-auth');\nconst parser = require('koa-bodyparser');\nconst mount = require('koa-mount');\nconst serve = require('koa-static');\nconst config = require('./config');\nconst consts = require('./consts');\nconst log = require('./log');\nconst url = require('./url');\n\n//------------------------------------------\n// Register middlewares to service\n//------------------------------------------\nexports.register = function(service) {\n  service.app.use(parser());\n  service.app.use(logger);\n  service.app.use(error401);\n  service.app.use(mount(url('/admin'), auth(config.webapp.auth)));\n  service.app.use(mount(url('/api/admin'), auth(config.webapp.auth)));\n  service.app.use(mount(url('/public'), serve(consts.staticDir)));\n};\n\n//------------------------------------------\n// Custom koa middlewares\n//------------------------------------------\n/**\n * 401 handler (for basic-auth)\n */\nfunction *error401(next) {\n  try {\n    yield next;\n  } catch (err) {\n    if (401 == err.status) {\n      this.status = 401;\n      this.set('WWW-Authenticate', 'Basic');\n      this.body = 'Unauthorized';\n    } else {\n      throw err;\n    }\n  }\n}\n\n/**\n * Simple request logger.\n */\nfunction *logger(next) {\n  var startAt = new Date();\n  var ctx = this;\n  var done = function() {\n    var elapsed = new Date() - startAt;\n    log.info(\"%sms %s %s %s\", elapsed, ctx.status, ctx.method,\n             ctx.originalUrl);\n  };\n  ctx.res.once('finish', done);\n  ctx.res.once('close', done);\n  yield next;\n}\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/views.js":"/**\n * @overview  Bell webapp views.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n// jshint -W124\n\n'use strict';\n\nconst clone = require('clone');\nconst route = require('koa-route');\nconst render = require('./render');\nconst url = require('./url');\nconst util = require('./util');\n\n//------------------------------------------\n// Register views to service.\n//------------------------------------------\nexports.register = function(service) {\n  service.app.use(route.get(url('/'), index));\n  service.app.use(route.get(url('/admin'), admin));\n  service.app.use(route.get(url('/admin/config'), config));\n  service.app.use(route.get(url('/admin/project'), project));\n  service.app.use(route.get(url('/admin/project/:id'), projectEdit));\n  service.app.use(route.get(url('/admin/receiver'), receiver));\n  service.app.use(route.get(url('/admin/receiver/:id'), receiverEdit));\n};\n\n//------------------------------------------\n// Util functions\n//------------------------------------------\n/**\n * Normalize params from koa query.\n * @param {Object} query // ctx.request.query\n * @return {Object}\n */\nfunction normalizeParams(query) {\n  query = query || {};\n  var params = {\n    type: query.type || 'm',\n    limit: +query.limit || 50,\n    sort: query.sort || 'up',\n    past: query.past || '0s',\n    stop: +query.stop || 0,\n  };\n  if (!query.project) {\n    params.pattern = query.pattern || '*';\n  } else {\n    params.project = query.project;\n  }\n  return params;\n}\n\n/**\n * Switch params with key-value pairs.\n * @param {Object} params // params\n * @param {Object} pairs // {paramName: paramNewValue}\n * @return {String}\n */\nfunction switchParams(params, pairs) {\n  var defaults = normalizeParams();\n  var newParams = util._extend(clone(params), pairs);\n  return util.cleanWith(newParams, defaults);\n}\n\n//------------------------------------------\n// View handlers\n//------------------------------------------\n/**\n * @view /\n * @template index.html\n */\nfunction *index() {\n  this.body = yield render('index.html', {\n    params: normalizeParams(this.request.query),\n    switchParams: switchParams,\n  });\n}\n\n/**\n * @view /admin\n * @redirect /admin/project\n */\nfunction *admin() {\n  this.redirect(url('/admin/project'));\n}\n\n/**\n * @view /admin/config\n * @template admin/config.html\n */\nfunction *config() {\n  this.body = yield render('admin/config.html');\n}\n\n/**\n * @view /admin/project\n * @template admin/project.html\n */\nfunction *project(name) {\n  this.body = yield render('admin/project.html');\n}\n\n/**\n * @view /admin/project/:id\n * @template admin/project.edit.html\n */\nfunction *projectEdit(id) {\n  this.body = yield render('admin/project.edit.html', {\n    id: id\n  });\n}\n\n/**\n * @view /admin/receiver\n * @template admin/receiver.html\n */\nfunction *receiver(){\n  this.body = yield render('admin/receiver.html');\n}\n\n/**\n * @view /admin/receiver/:id\n * @template admin/receiver.edit.html\n */\nfunction *receiverEdit(id) {\n  this.body = yield render('admin/receiver.edit.html', {\n    id: id\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/render.js":"/**\n * @overview  Template Renderer function.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst nunjucks = require('nunjucks');\nconst config = require('./config');\nconst consts = require('./consts');\nconst pkg = require('../package');\nconst url = require('./url');\nconst util = require('./util');\n\n//----------------------------------------------------\n// Nunjucks Env Globals\n//----------------------------------------------------\nconst loader = new nunjucks.FileSystemLoader(consts.viewsDir, {noCache: true});\nconst env = new nunjucks.Environment(loader);\n\nenv.addGlobal('JSON', JSON);\nenv.addGlobal('Object', Object);\nenv.addGlobal('isNaN', isNaN);\nenv.addGlobal('config', config);\nenv.addGlobal('url', url);\nenv.addGlobal('package', pkg);\nenv.addGlobal('util', util);\n\n//----------------------------------------------------\n// Nunjucks Renderer\n//----------------------------------------------------\n/**\n * Make nunjucks to work with koa\n *\n *   @param {String} template\n *   @param {Object} context\n *   @return {Function} // thunkify\n */\n\nfunction render(template, context) {\n  return function(callback) {\n    env.render(template, context, callback);\n  };\n}\n\n//------------------------------------------\n// Exports\n//------------------------------------------\nmodule.exports = render;\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/alerter.js":"/**\n * @overview  Bell alerter service.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n// jshint -W124\n\n'use strict';\n\nconst minimatch = require('minimatch');\nconst config = require('./config');\nconst crons = require('./crons');\nconst log = require('./log');\nconst models = require('./models');\nconst service = require('./service');\nconst util = require('./util');\n\nfunction Alerter() {}\nutil.inherits(Alerter, service);\n\n/**\n * Serve entry.\n */\nAlerter.prototype.serve = function *() {\n  var self = this;\n  this.stats = {};  // {name: stamp}\n  this.loadSender();\n  // reload sender on config reloading\n  config.emitter.on('reload', function() {\n    if (self.sender)\n      delete require.cache[require.resolve(config.alerter.sender)];\n    self.loadSender();\n  });\n  this.createSequelize();\n  models.register(this.sequelize);\n  crons.register(this);\n  this.createSocketServer(config.alerter.port, function(item) {\n    self.send({\n      name: item[0][0],\n      stamp: item[0][1][0],\n      value: item[0][1][1],\n      trend: item[1],\n      mean: item[2],\n    });\n  });\n  yield this.sequelize.sync();\n  crons.syncProjectsOnDBFileChanges();\n};\n\nAlerter.prototype.loadSender = function() {\n  if (config.alerter.sender) {\n    log.info(\"load sender from %s\", config.alerter.sender);\n    this.sender = require(config.alerter.sender);\n  } else {\n    log.warn(\"no sender module configured\");\n  }\n};\n\n/**\n * Send alerting message on anomaly detected.\n * @param {Object} data\n */\nAlerter.prototype.send = function(data) {\n  var projects = crons.ctx.projects;\n  var project, rule, receiver, i, j, k;\n\n  if (!this.stats[data.name])\n    this.stats[data.name] = 0;\n\n  for (i = 0; i < projects.length; i++) {\n    project = projects[i];\n    for (j = 0; j < project.rules.length; j++) {\n      rule = project.rules[j];\n      if (this.test(data, rule) &&\n          ((data.stamp - this.stats[data.name]) >= config.alerter.interval)) {\n            for (k = 0; k < project.receivers.length; k++) {\n              receiver = project.receivers[k];\n              if (this.sender.sendEmail && receiver.enableEmail)\n                this.sender.sendEmail(receiver, project, data, log);\n              if (this.sender.sendSms && receiver.enablePhone)\n                this.sender.sendSms(receiver, project, data, log);\n            }\n            if (this.sender.sendCallback) {\n              this.sender.sendCallback(project, data, log);\n            }\n          this.stats[data.name] = data.stamp;\n          }\n    }\n  }\n};\n\n/**\n * Test anomaly detection item against rule\n * @param {Array} data\n * @param {Rule} rule\n * @return {Boolean}\n */\nAlerter.prototype.test = function(data, rule) {\n  if (!minimatch(data.name, rule.pattern))\n    return false;\n  if (!((rule.up && (data.trend >= 1)) || (rule.down && (data.trend <= -1))))\n    return false;\n  if ((data.trend >= 1) && (rule.min !== null) && (rule.min > data.value))\n    return false;\n  if ((data.trend <= -1) && (rule.max !== null) && (rule.max < data.value))\n    return false;\n  return true;\n};\n\nmodule.exports = new Alerter();\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/lib/cleaner.js":"/**\n * @overview  Bell cleaner service.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n'use strict';\n\nconst co = require('co');\nconst config = require('./config');\nconst log = require('./log');\nconst service = require('./service');\nconst util = require('./util');\n\n/**\n * Service cleaner.\n */\nfunction Cleaner() {}\nutil.inherits(Cleaner, service);\n\n/**\n * Clean dead metrics, this function will check the last\n * time of a metric hit bell, if the age exceeds threshold,\n * clean it.\n */\nCleaner.prototype.clean = function *() {\n  var hash = config.ssdb.prefix + 'trend',\n      threshold = config.cleaner.threshold,\n      list = yield this.ssdb.acquire().hgetall(hash),\n      dict = {},\n      i,\n      keys = [],\n      now = +new Date() / 1e3;\n\n  //----------------------------------------------------\n  // Collect names to delete\n  //----------------------------------------------------\n  for (i = 0; i < list.length; i += 2) {\n    dict[list[i]] = +(list[i + 1].split(':')[1]);\n  }\n\n  for (var key in dict) {\n    if ((now - dict[key] > threshold)) {\n      keys.push(key);\n      log.info(\"clean target: %s (%ds)..\", key, now - dict[key]);\n    }\n  }\n\n  //----------------------------------------------------\n  // Delete in ssdb\n  //----------------------------------------------------\n  if (keys.length === 0) {\n    return;\n  }\n\n  var args = [hash];\n\n  for (i = 0; i < keys.length; i++) {\n    args.push(keys[i]);\n  }\n\n  // build delete reqs\n  var reqs = [this.ssdb.acquire().multi_hdel.apply(null, args)];\n\n  for (i = 0; i < keys.length; i++) {\n    reqs.push(this.ssdb.acquire().zclear(keys[i]));\n  }\n\n  yield reqs;\n};\n\nCleaner.prototype.serve = function *() {\n  var self = this;\n\n  this.createSsdbPool();\n\n  log.info(\"cleaner started, interval: %ds, threshold: %ds\",\n           config.cleaner.interval, config.cleaner.threshold);\n\n  // clean on startup\n  yield this.clean();\n\n  setInterval(co.wrap(function *() {\n    yield self.clean();\n  }), config.cleaner.interval * 1e3);\n};\n\nmodule.exports = new Cleaner();\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/exampleConfig.js":"/**\n * Configurations for eleme/bell.js.\n *\n * Global Options\n *   interval           incoming metrics time interval (in sec). [default: 10]\n *   autoReload         if set true, config will be auto reread and applied, note\n *                      that not all options are auto reloading. [default: true]\n *\n * Beanstalkd Options\n *   host               hostname/IP of beanstalkd server. [default: '0.0.0.0']\n *   port               port of beanstalkd server. [default: '0.0.0.0']\n *   tube               tube to use/watch. [default: 'bell']\n *\n * SSDB Options:\n *   host               hostname/IP of ssdb server. [default: '0.0.0.0']\n *   port               port of ssdb server. [default: 8888]\n *   auth               auth to connect to ssdb server. [default: null]\n *   size               connection pool size. [default: 6]\n *   prefix             the prefix to name bell zset/hash.. [default: 'bell.']\n *\n * SQLite Options:\n *   file               file path for sqlite (maintains admin etc.) [default: 'bell.db']\n *\n * Listener Options\n *   port               listener port to listen. [default: 2015]\n *   whitelist          metrics whitelist. if set empty `[]`, rule patterns from sqlite\n *                      will be used. [auto reloading, default: ['*']]\n *   blacklist          metrics blacklist. [auto reloading, default: ['statsd.*']]\n *                      listener will allow one metric to pass only if it matches one\n *                      pattern in whitelist and dosen't match any pattern in blacklist.\n *\n * Analyzer Options\n *   workers            number of analyzer workers to start. [default: 4]\n *   strict             strict mode flag. [auto reloading, default: true]\n *   startSize          analyzers won't start until the data set is larger than\n *                      this size. [default: 50]\n *   periodicity        metrics periodicity (in sec). [default: 24*3600 (1 day)]\n *   expiration         datapoint expiration (in ms) for all metrics. [default: 5*24*3600 (5 days)]\n *   filterOffset       analyzers filter history data within some offset\n *                      (as a percentage of periodicity). [auto reloading, default: 0.01]\n *   trendingFactor     the factor to calculate trending value via weighted moving\n *                      average algorithm. [auto reloading, default: 0.1]\n *   fillBlankCounters  fill in blank inactive counters as zeros. [default: false]\n *   fillBlankTimers    fill in blank inactive timers as zeros. [default: false]\n *\n * Webapp Options\n *   port               webapp port to listen. [default: 2016]\n *   workers            number of webapp workers to start. [default: 2]\n *   auth               username and password for admin basic auth. [default: 'admin:admin']\n *   root               webapp server root path. [default: null]\n *\n * Cleaner Options\n *   interval           cleaning time interval (in secs). [default: 10*60 (10min)]\n *   threshold          one metric will be cleaned if the age it hitting bell\n *                      exceeds this threshold (in sec). [default: 2*24*3600 (2 day)]\n * Alerter Options\n *   host               alerter host to bind/connect. [default: '0.0.0.0']\n *   port               alerter port to listen/connect. [default: 2017]\n *   sender             module to send message (i.e. sms, email) for alerter. [default: null]\n *   interval           alerter time interval, in seconds. [default: 20*60]\n */\n\n{\n  interval: 10,\n  autoReload: true,\n\n  beanstalkd: {\n    host: '0.0.0.0',\n    port: 11300,\n    tube: 'bell',\n  },\n\n  ssdb: {\n    host: '0.0.0.0',\n    port: 8888,\n  },\n\n  sqlite: {\n    file: 'bell.db',\n  },\n\n  listener: {\n    port: 2015,\n    whitelist: ['*'],\n    blacklist: ['statsd.*'],\n  },\n\n  analyzer: {\n    workers: 4,\n    strict: true,\n  },\n\n  webapp: {\n    port: 2016,\n    workers: 2,\n    auth: {name: 'admin', pass: 'admin'},\n  },\n\n  cleaner: {\n    interval: 10*60,\n    threshold: 2*24*3600,\n  },\n\n  alerter: {\n    port: 2017,\n    sender: null,\n    interval: 20*60,\n  },\n}\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/exampleSender.js":"/**\n * Bell alerter sender example.\n */\n\nconst util = require('util');\n\n/**\n * @param {Object} receiver\n * @param {Object} project\n * @param {Object} data\n * @param {Logger} log\n */\nexports.sendEmail = function(receiver, project, data, log) {\n  var email = receievr.email;\n  var projectName = project.name;\n  var date = new Date(data.stamp * 1000).toTimeString().slice(0, 8);\n  var value = data.value.toFixed(2);\n  var trend = data.trend.toFixed(2);\n  var mean = data.mean.toFixed(2);\n  // format message and send email\n};\n\nexports.sendSms = function(receiver, project, data, log) {\n  // similar with `sendEmail`\n};\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/gulpfile.js":"const gulp = require('gulp');\nconst argv = require('yargs').argv;\nconst concat = require('gulp-concat');\nconst del = require('del');\nconst debug = require('gulp-debug');\nconst gulpif = require('gulp-if');\nconst minify = require('gulp-minify-css');\nconst uglify = require('gulp-uglify');\n\n// Clean build\ngulp.task('clean', function() {\n  return del(['static/css', 'static/js']);\n});\n\n// Minify css\ngulp.task('css', function() {\n  var files = [\n    'node_modules/bootswatch/simplex/bootstrap.css',\n    'static/src/css/*.css',\n  ];\n  return gulp.src(files)\n    .pipe(debug({title: 'Css:'}))\n    .pipe(minify())\n    .pipe(concat('all.min.css'))\n    .pipe(debug({title: 'Css minified:'}))\n    .pipe(gulp.dest('static/css'));\n});\n\n// Minify js\ngulp.task('js', function() {\n  var files = [\n    'node_modules/jquery/dist/jquery.js',\n    'node_modules/bootstrap/dist/js/bootstrap.js',\n    'node_modules/d3/d3.js',\n    'node_modules/cubism/cubism.v1.js',\n    'node_modules/nunjucks/browser/nunjucks.js',\n    'static/src/js/app.js',\n    'static/src/js/util.js',\n    'static/src/js/handlers/*.js',\n    'static/src/js/controllers/*.js',\n  ];\n  return gulp.src(files)\n    .pipe(debug({title: 'Js:'}))\n    .pipe(gulpif(!argv.dev, uglify()))\n    .pipe(concat('all.min.js'))\n    .pipe(debug({title: 'Js minified:'}))\n    .pipe(gulp.dest('static/js'));\n});\n\ngulp.task('default', ['css', 'js']);\n","/home/travis/build/npmtest/node-npmtest-bell.js/node_modules/bell.js/static/src/js/app.js":"/**\n * @overview  Global app instance.\n * @author    Chao Wang (hit9)\n * @copyright 2015 Eleme, Inc. All rights reserved.\n */\n\n(function() {\n  this.app = {};\n  app.util = {};\n\n  app.handler = function(name, register) {\n    app.handlers = app.handlers || {};\n    app.handlers[name] = {};\n    register(app.handlers[name], app.util);\n  };\n\n  app.controller = function(name, register) {\n    app.controllers = app.controllers || {};\n    app.controllers[name] = {};\n    register(app.controllers[name], app.handlers, app.util);\n  };\n})(this);\n"}